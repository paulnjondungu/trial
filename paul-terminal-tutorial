Bellow is a summary on some of the basic commands and their usage in Ubuntu Terminal



On a Ubuntu system you can find the Terminal launcher by clicking on “Activities” item at the top left of the screen. Then type the first few letters of “terminal” or while on the desktop use the shortcut Ctrl-Alt-T 


Most commands in the terminal are relative to the root directory however the are also plenty of shortcuts and commands that are absolute


( / )  is the root directory in terminal. Its relative nature requires you insert it before a command when navigating through directories


( pwd ) is an abbreviation of ‘print working directory’. This command is used to show which command you are currently working on


( cd ) meaning “change directory” is a command used when changing directories. When used on its own as an absolute command it becomes a shortcut to take you back to your home directory
 
 
( ~ ) this is a shortcut command for “home” directory
              Example
              cd /
              cd or cd ~   
By running these commands you’ll have changed directories from (home) to (/) and back to (home)


( .. ) is used when you have opened directories and you want to get to the parent directory
You can also use ( .. )more than once ( ../../.. )if you have to move up through multiple levels of parent directories:
              Example
              cd /
              cd /etc
              cd ..
              cd /var/log
              cd ../..
              
              
( mkdir ) which is short for ‘make directory’ is used to create new directories, below we will see two ways to make folders
              Example
              mkdir dir1 dir2 dir3 
This command will create all folders in one directory
              mkdir -p dir4/dir5/dir6
while this command will create dir6 inside dir5 inside dir4
The ( -p ) used is called an option or a switch, options are used to modify commands. ( -p ) in this case means “Create the parent directories too”


( ls ) is used to take a look and confirm that directories,folders and files have been created.  ( ls ) stands for “list”


If we add spaces to our folder names, the spaced words will will be installed as separate directories, to avoid this we have to “escape” them, this are special codes telling the computer to treat particular characters differently
             Example
             mkdir "folder 1"
             mkdir 'folder 2'
             mkdir "folder 4" "folder 5"
             mkdir folder\ 3
             mkdir "folder 4" "folder 5"
             mkdir -p "folder 6"/"folder 7"
An easier way to do the above is by using underscores ( _ ) and hyphens ( - ) instead of spaces.
             Mkdir folder-8


( > ) used at the end of a command line can be used to capture output in the form of a text file. This is creating files using redirection
             Example
             ls > output.txt 
             
          
we’ll use ( cat ) command to look at the content inside a text file
             Example
             cat output.txt             
                                      
             
( echo ) command combined with a redirect command ( > ) creates text files
             Example
             echo "this is a test" > test_1.txt
             echo this_is_a_second_test > test_2.txt
             echo this-is-a-third-test > test_3.txt  
             
             
Using a combination of shortcuts we can collect together all specific files starting with “t” and put them in one text file. 
             Example
             cat t* > combine.txt
             cat combine.txt                       


( cat ) is more than a just file viewer, it comes from concatenate meaning “link together”
when the command above is used in an already existing file it will delete and print the new output


( >> ) A double on the greater than character will append to the file instead.
             Example
             echo "I've appended a line!" >> combine.txt
Note-
Linux systems are case sensitive , “A.txt” and “a.txt” are two different files
we advise not to differentiate your files using case, for it may bring confusion especially when collaborating with systems that are case insensitive


( mv ) "move" command is used when you want to transfer files across different folders. mv is also used to rename files.
             Example
             mv combined.txt dir1
             mv combined.txt sum.txt 
             
             
Just as ( .. ) represents parent directory ( . ) represents current working directory
             Example
             mv dir1/* .             
                                    
                                    
( cp ) "copy" command is used to copy files. When you copy files to a destination that doesn’t exist it will simply automatically create that file and copy.
Note- 
This does not work with directory as you have to create a directory first using mkdir command
             Example
             cp combined.txt back_combined.txt                                    
                                    
                                    
(rm) "remove" command is used to delete folders. However it only deletes files
             Example
             rm sum.txt
To delete empty directories use rmdir
             rmdir dir1
To delete directories with their files use rmdir -r
             rm -r "folder 6"                                   
                                    
                                    
To know How many lines are there in “back_combined txt file” The ( wc ) "word count" command can tell us that, using the ( -l ) switch to tell it we only want the line count (it can also do character counts and, as the name suggests, word counts):
             Example
             wc -l back_combined.txt 
                                                
                                    
( | ) “piping” a shortcut that takes the output of one command and feeds it as input to the next command
             Example 
             ls ~ | wc -l
             ls /etc|less                                    
                                    
                                    
( uniq ) command detects unique lines only if the file is sorted having repeated lines adjusent to each other                                    
                                    
                                    
( sort ) command sorts a files alphabetically                                    
                                    
                                    
A combination of commands can help us know how many uniq lines we have on our back_combined.txt
              Example
              sort back_combined.txt|uniq|wc -l
Note-
man (manual) is an instruction manual for command lines. It explains more about a command and a synopsis on how to use it
              Example 
              man rmdir
              man uniq
Note
The superuser is, as the name suggests, a user with super powers. In older systems it was a real user, with a real username (almost always “root”) that you could log in as if you had the password. As for those super powers: root can modify or delete any file in any directory on the system, regardless of who owns them; root can rewrite firewall rules or start network services that could potentially open the machine up to an attack; root can shutdown the machine even if other people are still using it. In short, root can do just about anything, skipping easily round the safeguards that are usually put in place to stop users from overstepping their bounds.


( su ) this is a command used to switch to the super user. One should be careful when doing tasks in super user mode
( sudo ) this is a command that tells the “super user, do” a specific task. This is a safer way as it does not open up the super user entirely instead it provides specific instructions from outside and for a limited amount of time before it asks for a password

A common instruction given to the super user is installing new software using ( apt ) or ( apt-get ) or ( snap install )
              Example
              sudo apt get tree   
              
              
Starting a name with a dot (”.”) is enough to make it hidden
              Example
              mkdir .hidden
       
       
Use the ( -a ) "show all" switch to ls to make it show everything in a directory, including the hidden files and folders:                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                                                                                                               
                              
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
